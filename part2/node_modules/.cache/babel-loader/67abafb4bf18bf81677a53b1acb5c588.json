{"ast":null,"code":"var _jsxFileName = \"/home/kumakura/Documents/web/part1/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Button = props => {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: props.handleClick,\n    children: props.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Button;\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" good \", good]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" neutral \", neutral]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" bad \", bad]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" all \", good + neutral + bad]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" average \", (good - bad) / Math.max(good + neutral + bad, 1)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" positive \", good / Math.max(good + neutral + bad, 1)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c2 = Statistics;\n\nconst App = () => {\n  _s();\n\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleGood = () => setGood(good + 1);\n\n  const handleNeutral = () => setNeutral(neutral + 1);\n\n  const handleBad = () => setBad(bad + 1);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: handleGood,\n      text: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: handleNeutral,\n      text: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: handleBad,\n      text: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Statistics\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/home/kumakura/Documents/web/part1/src/App.js"],"names":["React","useState","Button","props","handleClick","text","Statistics","good","neutral","bad","Math","max","App","setGood","setNeutral","setBad","handleGood","handleNeutral","handleBad"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACxB,sBACE;AAAQ,IAAA,OAAO,EAAEA,KAAK,CAACC,WAAvB;AAAA,cACGD,KAAK,CAACE;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAND;;KAAMH,M;;AAQN,MAAMI,UAAU,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,OAAP;AAAgBC,EAAAA;AAAhB,CAAD,KAA0B;AAC3C,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,2BAAYF,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,8BAAeC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAA,0BAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAA,0BAAWF,IAAI,GAAGC,OAAP,GAAiBC,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AAAA,8BAAe,CAACF,IAAI,GAAGE,GAAR,IAAeC,IAAI,CAACC,GAAL,CAASJ,IAAI,GAAGC,OAAP,GAAiBC,GAA1B,EAA+B,CAA/B,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,eAOE;AAAA,+BAAiBF,IAAD,GAASG,IAAI,CAACC,GAAL,CAASJ,IAAI,GAAGC,OAAP,GAAiBC,GAA1B,EAA+B,CAA/B,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA,kBADF;AAWD,CAZD;;MAAMH,U;;AAcN,MAAMM,GAAG,GAAG,MAAM;AAAA;;AAChB;AACA,QAAM,CAACL,IAAD,EAAOM,OAAP,IAAkBZ,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACO,OAAD,EAAUM,UAAV,IAAwBb,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACQ,GAAD,EAAMM,MAAN,IAAgBd,QAAQ,CAAC,CAAD,CAA9B;;AAEA,QAAMe,UAAU,GAAG,MAAMH,OAAO,CAACN,IAAI,GAAG,CAAR,CAAhC;;AACA,QAAMU,aAAa,GAAG,MAAMH,UAAU,CAACN,OAAO,GAAG,CAAX,CAAtC;;AACA,QAAMU,SAAS,GAAG,MAAMH,MAAM,CAACN,GAAG,GAAG,CAAP,CAA9B;;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAEO,UAArB;AAAiC,MAAA,IAAI,EAAC;AAAtC;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAEC,aAArB;AAAoC,MAAA,IAAI,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAEC,SAArB;AAAgC,MAAA,IAAI,EAAC;AAArC;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAnBD;;GAAMN,G;;MAAAA,G;AAqBN,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react'\n\nconst Button = (props) => {\n  return (\n    <button onClick={props.handleClick}>\n      {props.text}\n    </button>\n  );\n}\n\nconst Statistics = ({good, neutral, bad}) => {\n  return (\n    <>\n      <h1> statistics</h1>\n      <div> good {good}</div>\n      <div> neutral {neutral}</div>\n      <div> bad {bad}</div>\n      <div> all {good + neutral + bad}</div>\n      <div> average {(good - bad) / Math.max(good + neutral + bad, 1)}</div>\n      <div> positive {(good) / Math.max(good + neutral + bad, 1)}</div>\n    </>\n  );\n}\n\nconst App = () => {\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const handleGood = () => setGood(good + 1);\n  const handleNeutral = () => setNeutral(neutral + 1);\n  const handleBad = () => setBad(bad + 1);\n\n  return (\n    <div>\n      <h1> give feedback</h1>\n      <Button handleClick={handleGood} text=\"good\"/>\n      <Button handleClick={handleNeutral} text=\"neutral\"/>\n      <Button handleClick={handleBad} text=\"bad\"/>\n\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}